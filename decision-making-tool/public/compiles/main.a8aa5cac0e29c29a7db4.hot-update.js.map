{"version":3,"file":"main.a8aa5cac0e29c29a7db4.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAsHA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAgIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnVA","sources":["webpack://decision-making-tool/./src/builders/mainBlock.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import * as fs from 'fs';\n\nimport { getFromLocalStorage, objData } from '..';\nimport '../../public/styles.css';\nimport { Buttons } from './buttons';\nimport { clearList } from './clearList';\nimport { dialogWrongValue } from './dialog';\nimport { createInput } from './inputFields';\nimport { saveToFile } from './saveData';\nimport { downloadData } from './downloadData';\nimport { loadOptions } from './loadOptions';\nimport { createChoosePage } from './wheel';\nimport { createPasteList } from './pasteList';\n\nconst NAMES_OF_BUTTONS = [\n  'Add Option',\n  'Paste list',\n  'Clear list',\n  'Save list to file',\n  'Load list from file',\n  'Start',\n];\n\nconst NUM_OF_BUTTONS = 6;\n\nexport const container = document.createElement('div');\nexport const containerForOptions = document.createElement('div');\n\nexport function create(parentTag: { after: (arg0: HTMLDivElement) => void }) {\n  if (!localStorage.count) {\n    localStorage.setItem('count', JSON.stringify([1]));\n  }\n\n  // const container = document.createElement('div');\n  containerForOptions.classList.add('container');\n  container.classList.add('container');\n  parentTag.after(containerForOptions);\n  parentTag.after(container);\n\n  //   const dialog = document.createElement('dialog');\n  //   dialog.setAttribute('aria-label', 'Paste list');\n  //   dialog.classList.add('popup');\n  //   container.append(dialog);\n  //   const dialogWrapper = document.createElement('div');\n  //   dialogWrapper.classList.add('dialog-wrapper');\n  //   dialog.append(dialogWrapper);\n  //   const form = document.createElement('form');\n  //   form.setAttribute('method', 'dialog');\n  //   form.classList.add('formForDialog');\n  //   dialogWrapper.append(form);\n  //   const textarea = document.createElement('textarea');\n  //   textarea.classList.add('textarea');\n  //   textarea.setAttribute('rows', '12');\n  //   textarea.setAttribute('cols', '64');\n  //   textarea.setAttribute(\n  //     'placeholder',\n  //     `\n  //     Paste a list of new options in a CSV-like format:\n\n  // title,1                 -> | title                 | 1 |\n  // title with whitespace,2 -> | title with whitespace | 2 |\n  // title , with , commas,3 -> | title , with , commas | 3 |\n  // title with \"quotes\",4   -> | title with \"quotes\"   | 4 |`,\n  //   );\n  //   textarea.setAttribute('name', 'table');\n  //   form.append(textarea);\n  //   const containerForButtons = document.createElement('div');\n  //   containerForButtons.classList.add('containerForButtons');\n  //   form.append(containerForButtons);\n  //   const cancel: Buttons = new Buttons('button', 'Cancel', 'cancelButton');\n  //   const confirm: Buttons = new Buttons('button', 'Confirm', 'confirmButton');\n  //   const cancelBut = cancel.createButton();\n  //   const confirmBut = confirm.createButton();\n  //   containerForButtons.append(cancelBut);\n  //   containerForButtons.append(confirmBut);\n\n  //   cancelBut.addEventListener('click', () => {\n  //     dialog.remove();\n  //   });\n\n  //   form.addEventListener('keypress', function (event) {\n  //     let key = event.key;\n  //     if (key === 'Enter') {\n  //       const lastSymbol = +textarea.value[textarea.value.length - 1];\n  //       if (isNaN(lastSymbol)) {\n  //         dialogWrongValue(container);\n  //       }\n  //     }\n  //   });\n\n  //   document.addEventListener('keypress', function (event) {\n  //     let key = event.key;\n\n  //     if (key === 'Escape') {\n  //       dialog.remove();\n  //     }\n  //     console.log(key);\n  //   });\n\n  //   dialog.addEventListener('click', closeOnBackDropClick);\n\n  //   function closeOnBackDropClick({ currentTarget, target }: MouseEvent): void {\n  //     const dialogElement = currentTarget;\n\n  //     if (dialogElement instanceof HTMLDialogElement) {\n  //       const isClickedOnBackDrop = target === dialogElement;\n  //       if (isClickedOnBackDrop && dialogElement) {\n  //         dialogElement.close();\n  //         dialog.remove();\n  //       }\n  //     }\n  //   }\n\n  //   confirmBut.addEventListener('click', event => {\n  //     const lastSymbol = +textarea.value[textarea.value.length - 1];\n  //     // let objData = getFromLocalStorage('dataFromInputs');\n  //     const dataFromTextarea = textarea.value.split('\\n');\n  //     dataFromTextarea.forEach(arrayElem => {\n  //       let data = arrayElem.split(/,[1-9]/);\n  //       let dataNum = /,[1-9]/.exec(arrayElem);\n  //       let countElem = getFromLocalStorage('count') || [];\n  //       console.log(dataNum);\n  //       if (dataNum) {\n  //         if (countElem.length === 0) {\n  //           countElem.push(1);\n  //         } else {\n  //           countElem.push(countElem[countElem.length - 1] + 1);\n  //         }\n  //         objData[`#${countElem[countElem.length - 1]}`] = dataNum[0]?.replace(',', '');\n  //         objData[`option-#${countElem[countElem.length - 1]}`] = data[0];\n  //         // let numOfElem = getFromLocalStorage('count') || [];\n\n  //         createInput(\n  //           containerForOptions,\n  //           countElem[countElem.length - 1],\n  //           data[0],\n  //           +dataNum[0]?.replace(',', ''),\n  //         );\n  //         localStorage.setItem('count', JSON.stringify(countElem));\n  //         const jsonString = JSON.stringify(objData);\n  //         localStorage.setItem('dataFromInputs', jsonString);\n  //         textarea.value = '';\n  //       } else if (dataNum == null) {\n  //         dialogWrongValue(containerForOptions);\n  //         event.preventDefault();\n  //       }\n  //     });\n\n  //     if (isNaN(lastSymbol)) {\n  //       dialogWrongValue(containerForOptions);\n  //       event.preventDefault();\n  //     }\n  //     dialog.remove();\n  //   });\n\n  for (let i = 0; i < NUM_OF_BUTTONS; i += 1) {\n    const button = new Buttons('button', NAMES_OF_BUTTONS[i], 'buttonList');\n    const elementOfContainer = button.createButton();\n    container.append(elementOfContainer);\n\n    if (i === 0) {\n      elementOfContainer.addEventListener('click', () => {\n        let numOfElem = getFromLocalStorage('count') || [];\n        console.log(numOfElem);\n        if (numOfElem.length === 0) {\n          numOfElem.push(1);\n        } else {\n          numOfElem.push(numOfElem[numOfElem.length - 1] + 1);\n        }\n\n        createInput(containerForOptions, numOfElem[numOfElem.length - 1]);\n\n        localStorage.setItem('count', JSON.stringify(numOfElem));\n      });\n    }\n    if (i === 1) {\n      elementOfContainer.addEventListener('click', () => {\n        // container.classList.add('container');\n        // parentTag.after(containerForOptions);\n        // parentTag.after(container);\n\n        //         const dialog = document.createElement('dialog');\n        //         dialog.setAttribute('aria-label', 'Paste list');\n        //         dialog.classList.add('popup');\n        //         container.append(dialog);\n        //         const dialogWrapper = document.createElement('div');\n        //         dialogWrapper.classList.add('dialog-wrapper');\n        //         dialog.append(dialogWrapper);\n        //         const form = document.createElement('form');\n        //         form.setAttribute('method', 'dialog');\n        //         form.classList.add('formForDialog');\n        //         dialogWrapper.append(form);\n        //         const textarea = document.createElement('textarea');\n        //         textarea.classList.add('textarea');\n        //         textarea.setAttribute('rows', '12');\n        //         textarea.setAttribute('cols', '64');\n        //         textarea.setAttribute(\n        //           'placeholder',\n        //           `\n        //     Paste a list of new options in a CSV-like format:\n\n        // title,1                 -> | title                 | 1 |\n        // title with whitespace,2 -> | title with whitespace | 2 |\n        // title , with , commas,3 -> | title , with , commas | 3 |\n        // title with \"quotes\",4   -> | title with \"quotes\"   | 4 |`,\n        //         );\n        //         textarea.setAttribute('name', 'table');\n        //         form.append(textarea);\n        //         const containerForButtons = document.createElement('div');\n        //         containerForButtons.classList.add('containerForButtons');\n        //         form.append(containerForButtons);\n        //         const cancel: Buttons = new Buttons('button', 'Cancel', 'cancelButton');\n        //         const confirm: Buttons = new Buttons('button', 'Confirm', 'confirmButton');\n        //         const cancelBut = cancel.createButton();\n        //         const confirmBut = confirm.createButton();\n        //         containerForButtons.append(cancelBut);\n        //         containerForButtons.append(confirmBut);\n\n        //         cancelBut.addEventListener('click', () => {\n        //           dialog.remove();\n        //         });\n\n        //         form.addEventListener('keypress', function (event) {\n        //           let key = event.key;\n        //           if (key === 'Enter') {\n        //             const lastSymbol = +textarea.value[textarea.value.length - 1];\n        //             if (isNaN(lastSymbol)) {\n        //               dialogWrongValue(container);\n        //             }\n        //           }\n        //         });\n\n        //         document.addEventListener('keypress', function (event) {\n        //           let key = event.key;\n\n        //           if (key === 'Escape') {\n        //             dialog.remove();\n        //           }\n        //           console.log(key);\n        //         });\n\n        //         dialog.addEventListener('click', closeOnBackDropClick);\n\n        //         function closeOnBackDropClick({ currentTarget, target }: MouseEvent): void {\n        //           const dialogElement = currentTarget;\n\n        //           if (dialogElement instanceof HTMLDialogElement) {\n        //             const isClickedOnBackDrop = target === dialogElement;\n        //             if (isClickedOnBackDrop && dialogElement) {\n        //               dialogElement.close();\n        //               dialog.remove();\n        //             }\n        //           }\n        //         }\n\n        //         confirmBut.addEventListener('click', event => {\n        //           const lastSymbol = +textarea.value[textarea.value.length - 1];\n        //           // let objData = getFromLocalStorage('dataFromInputs');\n        //           const dataFromTextarea = textarea.value.split('\\n');\n        //           dataFromTextarea.forEach(arrayElem => {\n        //             let data = arrayElem.split(/,[1-9]/);\n        //             let dataNum = /,[1-9]/.exec(arrayElem);\n        //             let countElem = getFromLocalStorage('count') || [];\n        //             console.log(dataNum);\n        //             if (dataNum) {\n        //               if (countElem.length === 0) {\n        //                 countElem.push(1);\n        //               } else {\n        //                 countElem.push(countElem[countElem.length - 1] + 1);\n        //               }\n        //               objData[`#${countElem[countElem.length - 1]}`] = dataNum[0]?.replace(',', '');\n        //               objData[`option-#${countElem[countElem.length - 1]}`] = data[0];\n        //               // let numOfElem = getFromLocalStorage('count') || [];\n\n        //               createInput(\n        //                 containerForOptions,\n        //                 countElem[countElem.length - 1],\n        //                 data[0],\n        //                 +dataNum[0]?.replace(',', ''),\n        //               );\n        //               localStorage.setItem('count', JSON.stringify(countElem));\n        //               const jsonString = JSON.stringify(objData);\n        //               localStorage.setItem('dataFromInputs', jsonString);\n        //               textarea.value = '';\n        //             } else if (dataNum == null) {\n        //               dialogWrongValue(containerForOptions);\n        //               event.preventDefault();\n        //             }\n        //           });\n\n        //           if (isNaN(lastSymbol)) {\n        //             dialogWrongValue(containerForOptions);\n        //             event.preventDefault();\n        //           } else {\n        //             dialog.remove();\n        //           }\n        //         });\n\n        //         dialog.addEventListener('cancel', event => {\n        //           // if (event.key === 'Escape') {\n        //           dialog.remove();\n        //           // }\n        //         });\n        //         dialog.showModal();\n        createPasteList();\n      });\n    }\n    if (i === 2) {\n      elementOfContainer.addEventListener('click', () => {\n        clearList(containerForOptions);\n      });\n    }\n    if (i === 3) {\n      elementOfContainer.addEventListener('click', () => {\n        saveToFile();\n      });\n    }\n    if (i === 4) {\n      elementOfContainer.addEventListener('click', () => {\n        // clearList(containerForOptions);\n        downloadData(elementOfContainer);\n      });\n    }\n    if (i === 5) {\n      elementOfContainer.addEventListener('click', () => {\n        if (\n          !localStorage.getItem('dataFromInputs') ||\n          Object.keys(getFromLocalStorage('dataFromInputs')).length < 4\n        ) {\n          createPasteList();\n          dialogWrongValue(containerForOptions);\n        } else {\n          localStorage.page = '1';\n          location.hash = 'decision-maker';\n          createChoosePage();\n        }\n      });\n    }\n  }\n}\n","__webpack_require__.h = () => (\"f9b5c1be33ade2ad3f15\")"],"names":[],"sourceRoot":""}