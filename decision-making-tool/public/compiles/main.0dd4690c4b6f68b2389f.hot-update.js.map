{"version":3,"file":"main.0dd4690c4b6f68b2389f.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;;;;;;;;;AC/GA","sources":["webpack://decision-making-tool/./src/builders/wheel.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import { getFromLocalStorage } from '..';\nimport { container, containerForOptions } from './mainBlock';\n\nexport function createChoosePage() {\n  containerForOptions.textContent = '';\n  container.textContent = '';\n\n  const canvas = document.createElement('canvas');\n  canvas.setAttribute('id', 'wheel');\n  canvas.setAttribute('width', '400');\n  canvas.setAttribute('height', '400');\n\n  containerForOptions.append(canvas);\n\n  const selectedOption = document.createElement('div');\n  selectedOption.setAttribute('id', 'selectedOption');\n  containerForOptions.append(selectedOption);\n\n  const startButton = document.createElement('button');\n  startButton.setAttribute('id', 'startButton');\n  startButton.textContent = 'Start';\n  selectedOption.append(startButton);\n\n  const ctx = canvas.getContext('2d');\n\n  const options = getFromLocalStorage('dataFromInputs');\n\n  const sections = Object.keys(options).filter(key => key.startsWith('option-'));\n  const sizes = sections.map(section => parseInt(options[section.replace('option-#', '#')]););\n  let startAngle = 0; // Keeps track of the start angle for drawing\n  const total = sizes.reduce((a, b) => a + b, 0); // Total size of all sections\n  console.log(sections, sizes, total);\n\n  drawWheel(); // Initial drawing of the wheel\n\n  // Function to draw the wheel\n  function drawWheel() {\n    if (ctx) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas\n      startAngle = 0;\n\n      sections.forEach((section, index) => {\n        const size = (sizes[index] / total) * 2 * Math.PI; // Calculate the angle\n        ctx.beginPath();\n        ctx.moveTo(150, 150); // Move to the center\n        ctx.arc(150, 150, 100, startAngle, startAngle + size); // Draw the arc\n        ctx.fillStyle = getRandomColor(); // Random color for each section\n        ctx.fill();\n        ctx.stroke();\n        startAngle += size; // Update start angle for next section\n      });\n    }\n  }\n\n  // Function to get a random color\n  function getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  // Function to animate the wheel spin\n  function spinWheel() {\n    const spinTime = 3000; // Total spin time in milliseconds\n    const rotations = Math.floor(Math.random() * 5) + 5; // Random rotations, at least 5\n    const totalRotation = rotations * 2 * Math.PI + Math.random() * 2 * Math.PI; // Total angle to spin\n    let startTime: number | null = null;\n\n    function animate(time: number) {\n      if (!startTime) startTime = time;\n      const elapsed = time - startTime;\n\n      if (ctx) {\n        const progress = Math.min(elapsed / spinTime, 1); // Normalize time to a value between 0 and 1\n        const rotationAngle = totalRotation * easeOutCubic(progress); // Calculate current rotation based on easing\n        ctx.setTransform(1, 0, 0, 1, 150, 150); // Move the origin to the center\n        ctx.rotate(rotationAngle); // Rotate the canvas\n        ctx.clearRect(-150, -150, canvas.width, canvas.height); // Clear after rotate\n        drawWheel(); // Redraw the wheel\n        ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset the transform\n\n        if (progress < 1) {\n          requestAnimationFrame(animate); // Continue animating\n        } else {\n          // Final section selection calculation\n          const selectedAngle = rotationAngle % (2 * Math.PI); // Get the final angle\n          let cumulativeSize = 0;\n          for (let i = 0; i < sizes.length; i++) {\n            cumulativeSize += (sizes[i] / total) * 2 * Math.PI;\n            if (selectedAngle < cumulativeSize) {\n              selectedOption.innerText = `Selected: ${options[sections[i]]}`; // Display selected option\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    requestAnimationFrame(animate); // Start animation\n  }\n\n  // Easing function for a smooth spin\n  function easeOutCubic(t: number) {\n    return --t * t * t + 1;\n  }\n\n  // Start spin on button click\n  startButton.addEventListener('click', spinWheel);\n}\n","__webpack_require__.h = () => (\"2bba7381bdf4455ba38b\")"],"names":[],"sourceRoot":""}