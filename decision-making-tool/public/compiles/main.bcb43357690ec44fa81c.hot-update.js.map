{"version":3,"file":"main.bcb43357690ec44fa81c.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;ACxGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAwBA;AAEA;AAEA;AAEA;AAGA;AACA;;;;;;;;;ACvEA","sources":["webpack://decision-making-tool/./src/builders/wheel.ts","webpack://decision-making-tool/./src/index.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import { getFromLocalStorage } from '..';\nimport { containerForOptions } from './mainBlock';\n\nexport function createChoosePage() {\n  containerForOptions.textContent = '';\n\n  const canvas = document.createElement('canvas');\n  canvas.setAttribute('id', 'wheel');\n  canvas.setAttribute('width', '400');\n  canvas.setAttribute('height', '400');\n\n  containerForOptions.append(canvas);\n\n  const div = document.createElement('div');\n  containerForOptions.append(div);\n\n  const input = document.createElement('input');\n  input.setAttribute('type', 'text');\n  input.setAttribute('id', 'selectedOption');\n  input.setAttribute('readonly', '');\n  div.append(input);\n\n  const button = document.createElement('button');\n  button.setAttribute('id', 'startButton');\n  button.textContent = 'Start';\n  div.append(button);\n\n  const ctx = canvas.getContext('2d');\n\n  let options = getFromLocalStorage('dataFromInputs');\n  let angle = 0;\n  let spinning = false;\n\n  function drawWheel() {\n    const totalOptions = Object.keys(options).length;\n    let startAngle = 0;\n\n    if (ctx) {\n      for (const key in options) {\n        const { size, name } = options[key];\n        const sliceAngle = (parseInt(size) / totalOptions) * (Math.PI * 2);\n        ctx.beginPath();\n        ctx.moveTo(200, 200);\n        ctx.arc(200, 200, 150, startAngle, startAngle + sliceAngle);\n        ctx.fillStyle = 'hsl(' + Math.random() * 360 + ', 70%, 50%)'; // Random colors\n        ctx.fill();\n        ctx.save();\n        ctx.translate(\n          200 + Math.cos(startAngle + sliceAngle / 2) * 100,\n          200 + Math.sin(startAngle + sliceAngle / 2) * 100,\n        );\n        ctx.rotate(startAngle + sliceAngle / 2);\n        ctx.fillStyle = 'white';\n        ctx.fillText(name, -ctx.measureText(name).width / 2, 0);\n        ctx.restore();\n        startAngle += sliceAngle;\n      }\n    }\n  }\n\n  function spinWheel() {\n    if (spinning) return;\n    spinning = true;\n    let spinDuration = 3000; // spin for 3 seconds\n    let finalAngle = Math.random() * (Math.PI * 2); // Random final angle\n\n    const startTime = performance.now();\n\n    function rotate() {\n      const currentTime = performance.now();\n      const elapsed = currentTime - startTime;\n      angle = (elapsed / spinDuration) * (Math.PI * 2) + 2 * Math.PI * 3; // 3 full rotations\n      if (ctx) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawWheel();\n        ctx.save();\n        ctx.translate(200, 200);\n        ctx.rotate(angle);\n        ctx.translate(-200, -200);\n        ctx.restore();\n      }\n\n      if (elapsed < spinDuration) {\n        requestAnimationFrame(rotate);\n      } else {\n        stopWheel();\n      }\n    }\n\n    rotate();\n  }\n\n  function stopWheel() {\n    const index = Math.floor(\n      (angle % (Math.PI * 2)) / ((Math.PI * 2) / Object.keys(options).length),\n    );\n    input.value = options[index + 1].name; // Index starts at 0, options starts at 1\n    spinning = false;\n  }\n\n  button.addEventListener('click', spinWheel);\n\n  // Initial draw of the wheel\n  drawWheel();\n}\n","import '../public/styles.css';\n\nimport createTitleApp from './builders/app';\nimport { container, containerForOptions, create } from './builders/mainBlock';\nimport { createInput } from './builders/inputFields';\nimport { loadOptions } from './builders/loadOptions';\nimport { createChoosePage } from './builders/wheel';\n\nexport function getFromLocalStorage(key: string) {\n  const jsonString = localStorage.getItem(key);\n  // Convert JSON string back to object\n  return jsonString ? JSON.parse(jsonString) : null;\n}\n\n// Call the function to retrieve the object\nconst retrievedObject = getFromLocalStorage('dataFromInputs');\nconst countElem = getFromLocalStorage('count');\n\nexport const objData: {\n  [key: string]: string | number | RegExpExecArray | null | string[] | undefined;\n} = retrievedObject || {};\n\nwindow.addEventListener('load', event => {\n  if (!localStorage.page) {\n    localStorage.page = '0';\n    location.hash = 'main';\n  }\n\n  if (localStorage.page === '0') {\n    location.hash = 'main';\n  }\n\n  if (localStorage.page === '1') {\n    location.hash = 'decision-maker';\n    createChoosePage();\n  }\n\n  loadOptions(objData);\n  // if (localStorage.count !== '0') {\n  // const count = countElem || [1];\n  // let valOpt: string | undefined;\n  // let valW: number | undefined;\n  // for (let i = 0; i <= count.length - 1; i += 1) {\n  //   valOpt = '';\n  //   valW = 0;\n  //   for (let key of Object.keys(objData)) {\n  //     if (count[i] === +key.replace(/\\D/g, '') && key[0] === 'o') {\n  //       valOpt = String(objData[key]);\n  //     } else if (count[i] === +key.replace(/\\D/g, '') && key[0] === '#' && objData[key]) {\n  //       valW = +objData[key];\n  //     } else {\n  //       continue;\n  //     }\n  //   }\n\n  //   // if (valOpt !== undefined && valW !== undefined) {\n  //   createInput(containerForOptions, count[i], valOpt, valW);\n  //   // }\n  // }\n\n  // }\n});\n\nconst title = createTitleApp();\n\ndocument.body.append(title);\n\ncreate(title);\n\n// export const containerForOptions = document.createElement('div');\ncontainerForOptions.classList.add('containerForOptions');\ntitle.append(containerForOptions);\n","__webpack_require__.h = () => (\"f7edfd0c35ef19d0a96d\")"],"names":[],"sourceRoot":""}