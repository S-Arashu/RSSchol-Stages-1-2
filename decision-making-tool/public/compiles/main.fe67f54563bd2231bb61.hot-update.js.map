{"version":3,"file":"main.fe67f54563bd2231bb61.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AASA;AAKA;AACA;AACA;AACA;AAocA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAgEA;;;;;;;;;ACpUA","sources":["webpack://decision-making-tool/./src/builders/wheel.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import { getFromLocalStorage, isMusic, objData, SOUNDOFF, SOUNDON, title } from '..';\nimport { audio, audioWrong, createAudio, createAudioWrong } from './createAudio';\nimport { dialogWrongValue } from './dialog';\nimport { loadOptions } from './loadOptions';\nimport { container, containerForOptions, create } from './mainBlock';\n\n// const path = require('path');\n\n// // Define a directory and a file name\n// const directory = 'sounds';\n// const fileName = 'sounds_win.mp3';\n// const SOUNDON = 'Sound ON';\n// const SOUNDOFF = 'Sound OFF';\nexport const soundButton = document.createElement('button');\n// // Create a full path to the file\n// const filePath = path.join(__dirname, directory, fileName);\n// export let isSound = isMusic;\n\nexport function createChoosePage() {\n  containerForOptions.textContent = '';\n  container.textContent = '';\n  let isSound = Boolean(Number(localStorage.sound));\n  // if (!localStorage.sound) {\n  //   isSound = true;\n  //   localStorage.sound = '1';\n  //   soundButton.textContent = SOUNDON;\n  //   console.log('No sound');\n  // }\n\n  // if (localStorage.sound === '1') {\n  //   isSound = true;\n  //   soundButton.textContent = SOUNDON;\n  //   console.log('Sound on');\n  // }\n\n  // if (localStorage.sound === '0') {\n  //   isSound = false;\n  //   soundButton.textContent = SOUNDOFF;\n  //   console.log('Sound off');\n  // }\n\n  const canvas = document.createElement('canvas');\n  canvas.setAttribute('id', 'wheel');\n  canvas.setAttribute('width', '400');\n  canvas.setAttribute('height', '400');\n  containerForOptions.append(canvas);\n\n  const pointer = document.createElement('div');\n  pointer.setAttribute('id', 'pointer');\n  containerForOptions.append(pointer);\n\n  const startButton = document.createElement('button');\n  startButton.setAttribute('id', 'start');\n  startButton.textContent = 'Start';\n  containerForOptions.append(startButton);\n\n  const output = document.createElement('div');\n  output.setAttribute('id', 'selected-option');\n  containerForOptions.append(output);\n\n  const homeButton = document.createElement('button');\n  homeButton.setAttribute('id', 'homeButton');\n  homeButton.textContent = 'Home';\n  containerForOptions.append(homeButton);\n\n  // const soundButton = document.createElement('button');\n  soundButton.setAttribute('id', 'soundButton');\n  // soundButton.textContent = SOUNDON;\n  containerForOptions.append(soundButton);\n\n  // soundBtn = soundButton;\n\n  const containerForDuration = document.createElement('div');\n  containerForDuration.classList.add('container');\n  // container.setAttribute('tabindex', '1');\n  containerForDuration.classList.add('containerForDuration');\n  containerForOptions.append(containerForDuration);\n\n  const timeIcon = document.createElement('p');\n  timeIcon.classList.add('clock-icon');\n  timeIcon.textContent = '⏰';\n  containerForDuration.append(timeIcon);\n\n  const timeField = document.createElement('input');\n  timeField.classList.add('duration-input');\n  timeField.setAttribute('type', 'number');\n  timeField.setAttribute('placeholder', 'Duration in seconds');\n  timeField.setAttribute('value', '5');\n  timeField.setAttribute('min', '5');\n  timeField.setAttribute('max', '30');\n  timeField.setAttribute('title', 'Please enter a duration between 5 and 30 seconds');\n  containerForDuration.append(timeField);\n\n  // let durationValue: number;\n\n  // timeField.oninput = function () {\n  //   durationValue = +timeField.value;\n  // };\n\n  soundButton.addEventListener('click', () => {\n    // isSound = Boolean(Number(localStorage.sound));\n    isSound = !isSound;\n    if (!isSound) {\n      // audio.setAttribute('autoplay', 'false');\n      // audio.muted;\n      localStorage.sound = '0';\n      soundButton.textContent = SOUNDOFF;\n    }\n\n    if (isSound) {\n      // audio.setAttribute('autoplay', 'true');\n      localStorage.sound = '1';\n      soundButton.textContent = SOUNDON;\n      // audio.play();\n    }\n  });\n\n  homeButton.addEventListener('click', () => {\n    containerForOptions.textContent = '';\n    container.textContent = '';\n    localStorage.page = '0';\n    location.hash = 'main';\n\n    document.body.append(title);\n\n    create(title);\n\n    // export const containerForOptions = document.createElement('div');\n    containerForOptions.classList.add('containerForOptions');\n    title.append(containerForOptions);\n    loadOptions(objData);\n  });\n\n  let top = String(canvas.offsetTop + pointer.offsetHeight / 2);\n  let left = String(canvas.offsetLeft + canvas.offsetWidth / 2);\n  pointer.style.top = top + 'px';\n  pointer.style.left = left + 'px';\n\n  window.addEventListener('resize', () => {\n    top = String(canvas.offsetTop + pointer.offsetHeight / 2);\n    left = String(canvas.offsetLeft + canvas.offsetWidth / 2);\n    pointer.style.top = top + 'px';\n    pointer.style.left = left + 'px';\n  });\n\n  let options = getFromLocalStorage('dataFromInputs');\n\n  const ctx = canvas.getContext('2d');\n  const sections = Object.keys(options).filter(key => key.startsWith('#'));\n  const sectionValues = sections.map(key => parseInt(options[key], 10));\n  const sectionNames = sections.map(key => options[`option-${key}`]);\n  const total = sectionValues.reduce((sum, val) => sum + val, 0);\n  const angles = sectionValues.map(value => (value / total) * 2 * Math.PI);\n\n  let startAngle = 0;\n\n  function drawWheel() {\n    if (ctx) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      const centerX = canvas.width / 2;\n      const centerY = canvas.height / 2;\n      const radius = Math.min(centerX, centerY) * 0.9;\n\n      sections.forEach((section, index) => {\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.arc(centerX, centerY, radius, startAngle, startAngle + angles[index]);\n        ctx.fillStyle = 'orange'; // Keep the same color for all variants\n        ctx.fill();\n        ctx.stroke();\n\n        // Add text labels to the sections\n        const midAngle = startAngle + angles[index] / 2;\n        const textX = centerX + Math.cos(midAngle) * (radius / 2);\n        const textY = centerY + Math.sin(midAngle) * (radius / 2);\n        ctx.fillStyle = 'black';\n        ctx.fillText(sectionNames[index], textX, textY);\n\n        startAngle += angles[index];\n      });\n    }\n  }\n\n  function spinWheel(duration: number) {\n    let start: number | null = null;\n    const totalDegree = Math.random() * 360 + 720; // Spin at least 720 degrees\n    const spinDuration = duration * 1000; // Convert to milliseconds\n\n    function animate(timestamp: number | null) {\n      if (!start) start = timestamp;\n      if (timestamp && start) {\n        const elapsed = timestamp - start;\n        const progress = Math.min(elapsed / spinDuration, 1);\n        const easeOutQuad = progress * (2 - progress); // Easing function\n\n        const angle = totalDegree * (totalDegree - 720) * easeOutQuad;\n        startAngle = angle * (Math.PI / 180);\n\n        drawWheel();\n\n        if (progress < 1) {\n          requestAnimationFrame(animate);\n        }\n        // else {\n        //   const normalizedAngle = ((startAngle % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI); // Ensure angle is positive\n        //   const pointerAngle = (normalizedAngle + Math.PI / 2) % (2 * Math.PI); // Adjust the angle for pointer position\n        //   let cumulativeAngle = 0;\n        //   let idx;\n        //   for (idx = 0; idx < angles.length; idx++) {\n        //     cumulativeAngle += angles[idx];\n        //     if (pointerAngle < cumulativeAngle) {\n        //       break; // Found the section index\n        //     }\n        //   }\n        //   output.innerText = sectionNames[idx];\n        // }\n      }\n    }\n    requestAnimationFrame(animate);\n  }\n\n  startButton.addEventListener('click', () => {\n    if (+timeField.value >= 5 && +timeField.value <= 30) {\n      spinWheel(+timeField.value);\n      homeButton.disabled = true;\n      soundButton.disabled = true;\n      timeField.disabled = true;\n      startButton.disabled = true;\n      window.setTimeout(() => {\n        homeButton.disabled = false;\n        soundButton.disabled = false;\n        timeField.disabled = false;\n        startButton.disabled = false;\n        createAudio('win');\n        if (!isSound) {\n          // audio.setAttribute('autoplay', 'false');\n          audio.muted;\n          // soundButton.textContent = SOUNDOFF;\n        } else {\n          // audio.setAttribute('autoplay', 'true');\n          // soundButton.textContent = SOUNDON;\n          audio.play();\n        }\n      }, +timeField.value * 1000);\n    } else {\n      createAudioWrong('squeak');\n      if (!isSound) {\n        // audio.setAttribute('autoplay', 'false');\n        audioWrong.muted;\n        // soundButton.textContent = SOUNDOFF;\n      } else {\n        // audio.setAttribute('autoplay', 'true');\n        // soundButton.textContent = SOUNDON;\n        audioWrong.play();\n      }\n      dialogWrongValue(containerForOptions);\n    }\n  });\n\n  // Initial drawing of the wheel\n  drawWheel();\n\n  // const sectionCount = Object.keys(options).filter(key => key.startsWith('option-')).length;\n  // const ctx = canvas.getContext('2d');\n\n  // const drawWheel = () => {\n  //   const angle = (2 * Math.PI) / sectionCount;\n  //   let startAngle = 0;\n\n  //   if (ctx) {\n  //     for (let i = 0; i < sectionCount; i++) {\n  //       ctx.beginPath();\n  //       ctx.moveTo(200, 200); // Center\n  //       ctx.arc(200, 200, 150, startAngle, startAngle + angle);\n  //       ctx.fillStyle = 'lightblue'; // Same color\n  //       ctx.fill();\n  //       ctx.stroke();\n  //       ctx.save();\n  //       ctx.translate(\n  //         200 + Math.cos(startAngle + angle / 2) * 100,\n  //         200 + Math.sin(startAngle + angle / 2) * 100,\n  //       );\n  //       ctx.rotate(startAngle + angle / 2);\n  //       ctx.fillStyle = 'black';\n  //       ctx.fillText(options[`option-#${i + 1}`] || `Section ${i + 1}`, -25, 0);\n  //       ctx.restore();\n  //       startAngle += angle;\n  //     }\n  //   }\n  // };\n\n  // drawWheel();\n\n  // startButton.addEventListener('click', () => {\n  //   const totalDuration = 3000; // Duration of spin in milliseconds\n  //   const spinCount = 5; // Spins\n  //   let start: number | null = null;\n  //   let degrees = 0;\n\n  //   function spinWheel(timestamp: number | null) {\n  //     if (!start) start = timestamp;\n  //     if (timestamp && start && ctx) {\n  //       const elapsed = timestamp - start;\n  //       if (elapsed < totalDuration) {\n  //         // Simple easing effect\n  //         degrees += spinCount * 360 + (elapsed / totalDuration) * 360;\n  //         ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas\n  //         ctx.save(); // Save the current context\n  //         ctx.translate(200, 200); // Move to center\n  //         ctx.rotate((degrees * Math.PI) / 180); // Rotate\n  //         ctx.translate(-200, -200); // Move back\n  //         drawWheel(); // Draw the wheel\n  //         ctx.restore(); // Restore the context\n  //         requestAnimationFrame(spinWheel);\n  //       } else {\n  //         // Calculate the selected section\n  //         const selectedIndex = Math.floor(((degrees % 360) / 360) * sectionCount);\n  //         output.innerText = `Selected: ${options[`option-#${selectedIndex + 1}`]}`;\n  //       }\n  //     }\n  //   }\n\n  //   requestAnimationFrame(spinWheel);\n  // });\n}\n\n// window.addEventListener('load', event => {\n//   console.log(localStorage.sound);\n//   if (!localStorage.sound) {\n//     isSound = true;\n//     localStorage.sound = '1';\n//     soundButton.textContent = SOUNDON;\n//     console.log('No sound');\n//   }\n\n//   if (localStorage.sound === '1') {\n//     isSound = true;\n//     soundButton.textContent = SOUNDON;\n//     console.log('Sound on');\n//   }\n\n//   if (localStorage.sound === '0') {\n//     isSound = false;\n//     soundButton.textContent = SOUNDOFF;\n//     console.log('Sound off');\n//   }\n// });\n","__webpack_require__.h = () => (\"fc538d2e5f86e8d8dd26\")"],"names":[],"sourceRoot":""}