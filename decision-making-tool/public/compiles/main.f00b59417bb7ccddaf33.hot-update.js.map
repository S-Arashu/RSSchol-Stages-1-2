{"version":3,"file":"main.f00b59417bb7ccddaf33.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;AAQA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC1BA;AAEA;AACA;AACA;AAGA;AAGA;AACA;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAEA;AAEA;AAEA;AAGA;AACA;;;;;;;;;ACrEA","sources":["webpack://decision-making-tool/./src/builders/buttons.ts","webpack://decision-making-tool/./src/builders/clearList.ts","webpack://decision-making-tool/./src/builders/dialog.ts","webpack://decision-making-tool/./src/builders/mainBlock.ts","webpack://decision-making-tool/./src/builders/saveData.ts","webpack://decision-making-tool/./src/index.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import '../../public/styles.css';\n\ninterface IButtons {\n  tag: string;\n  text: string;\n  className: string;\n}\n\nexport class Buttons implements IButtons {\n  public tag!: string;\n  public text!: string;\n  public className!: string;\n\n  constructor(tag: string, text: string, className: string) {\n    this.tag = tag;\n    this.text = text;\n    this.className = className;\n  }\n\n  createButton() {\n    const button = document.createElement(this.tag);\n    button.textContent = this.text;\n    button.classList.add(this.className);\n\n    return button;\n  }\n}\n","import { objData } from '..';\n\nexport function clearList(elemForClear: HTMLDivElement) {\n  localStorage.setItem('dataFromInputs', JSON.stringify({}));\n  localStorage.setItem('count', JSON.stringify([]));\n\n  // if (objData){\n  Object.keys(objData).forEach(key => delete objData[key]);\n  // }\n\n  elemForClear.textContent = '';\n}\n","export function dialogWrongValue(parent: { append: (arg0: HTMLDialogElement) => void }) {\n  const dialog = document.createElement('dialog');\n  dialog.classList.add('popup');\n  dialog.textContent = 'Please, enter correct data';\n  parent.append(dialog);\n  dialog.showModal();\n}\n","import * as fs from 'fs';\n\nimport { getFromLocalStorage, objData } from '..';\nimport '../../public/styles.css';\nimport { Buttons } from './buttons';\nimport { clearList } from './clearList';\nimport { dialogWrongValue } from './dialog';\nimport { createInput } from './inputFields';\nimport { saveToFile } from './saveData';\n\nconst NAMES_OF_BUTTONS = [\n  'Add Option',\n  'Paste list',\n  'Clear list',\n  'Save list to file',\n  'Load list from file',\n  'Start',\n];\n\nconst NUM_OF_BUTTONS = 6;\n\nexport const container = document.createElement('div');\nexport const containerForOptions = document.createElement('div');\n\nexport function create(parentTag: { after: (arg0: HTMLDivElement) => void }) {\n  if (!localStorage.count) {\n    localStorage.setItem('count', JSON.stringify([1]));\n  }\n\n  // const container = document.createElement('div');\n  // containerForOptions.classList.add('container');\n  container.classList.add('container');\n  parentTag.after(containerForOptions);\n  parentTag.after(container);\n\n  const dialog = document.createElement('dialog');\n  dialog.setAttribute('aria-label', 'Paste list');\n  dialog.classList.add('popup');\n  container.append(dialog);\n  const form = document.createElement('form');\n  form.setAttribute('method', 'dialog');\n  form.classList.add('formForDialog');\n  dialog.append(form);\n  const textarea = document.createElement('textarea');\n  textarea.classList.add('textarea');\n  textarea.setAttribute('rows', '12');\n  textarea.setAttribute('cols', '64');\n  textarea.setAttribute(\n    'placeholder',\n    `\n    Paste a list of new options in a CSV-like format:\n\ntitle,1                 -> | title                 | 1 |\ntitle with whitespace,2 -> | title with whitespace | 2 |\ntitle , with , commas,3 -> | title , with , commas | 3 |\ntitle with \"quotes\",4   -> | title with \"quotes\"   | 4 |`,\n  );\n  textarea.setAttribute('name', 'table');\n  form.append(textarea);\n  const containerForButtons = document.createElement('div');\n  containerForButtons.classList.add('containerForButtons');\n  form.append(containerForButtons);\n  const cancel: Buttons = new Buttons('button', 'Cancel', 'cancelButton');\n  const confirm: Buttons = new Buttons('button', 'Confirm', 'confirmButton');\n  const cancelBut = cancel.createButton();\n  const confirmBut = confirm.createButton();\n  containerForButtons.append(cancelBut);\n  containerForButtons.append(confirmBut);\n  form.addEventListener('keypress', function (event) {\n    let key = event.key;\n    if (key === 'Enter') {\n      const lastSymbol = +textarea.value[textarea.value.length - 1];\n      // const firstNum =\n      if (isNaN(lastSymbol)) {\n        dialogWrongValue(container);\n      }\n    }\n    console.log(key);\n  });\n  confirmBut.addEventListener('click', event => {\n    const lastSymbol = +textarea.value[textarea.value.length - 1];\n\n    const dataFromTextarea = textarea.value.split('\\n');\n    dataFromTextarea.forEach(arrayElem => {\n      let data = arrayElem.split(/,[1-9]/);\n      let dataNum = /,[1-9]/.exec(arrayElem);\n      let countElem = getFromLocalStorage('count') || [];\n      console.log(dataNum);\n      if (dataNum) {\n        if (countElem.length === 0) {\n          countElem.push(1);\n        } else {\n          countElem.push(countElem[countElem.length - 1] + 1);\n        }\n        objData[`#${countElem[countElem.length - 1]}`] = dataNum[0]?.replace(',', '');\n        objData[`option-#${countElem[countElem.length - 1]}`] = data[0];\n        // let numOfElem = getFromLocalStorage('count') || [];\n\n        createInput(\n          containerForOptions,\n          countElem[countElem.length - 1],\n          data[0],\n          +dataNum[0]?.replace(',', ''),\n        );\n        localStorage.setItem('count', JSON.stringify(countElem));\n        const jsonString = JSON.stringify(objData);\n        localStorage.setItem('dataFromInputs', jsonString);\n        textarea.value = '';\n      } else if (dataNum == null) {\n        dialogWrongValue(containerForOptions);\n        event.preventDefault();\n      }\n    });\n\n    if (isNaN(lastSymbol)) {\n      dialogWrongValue(containerForOptions);\n      event.preventDefault();\n    }\n  });\n\n  for (let i = 0; i < NUM_OF_BUTTONS; i += 1) {\n    const button = new Buttons('button', NAMES_OF_BUTTONS[i], 'buttonList');\n    const elementOfContainer = button.createButton();\n    container.append(elementOfContainer);\n\n    if (i === 0) {\n      elementOfContainer.addEventListener('click', () => {\n        let numOfElem = getFromLocalStorage('count') || [];\n        console.log(numOfElem);\n        if (numOfElem.length === 0) {\n          numOfElem.push(1);\n        } else {\n          numOfElem.push(numOfElem[numOfElem.length - 1] + 1);\n        }\n\n        createInput(containerForOptions, numOfElem[numOfElem.length - 1]);\n\n        localStorage.setItem('count', JSON.stringify(numOfElem));\n      });\n    }\n    if (i === 1) {\n      elementOfContainer.addEventListener('click', () => {\n        dialog.showModal();\n      });\n    }\n    if (i === 2) {\n      elementOfContainer.addEventListener('click', () => {\n        clearList(containerForOptions);\n      });\n    }\n    if (i === 3) {\n      elementOfContainer.addEventListener('click', () => {\n        saveToFile();\n      });\n    }\n    if (i === 4) {\n      elementOfContainer.addEventListener('change', function (event) {\n        elementOfContainer.setAttribute('id', 'loadButton');\n        const fileInput = document.createElement('input');\n\n        fileInput.setAttribute('type', 'file');\n        fileInput.setAttribute('id', 'fileInput');\n        fileInput.setAttribute('accept', '.json');\n        fileInput.setAttribute('style', 'display: none;');\n      });\n    }\n  }\n}\n","import { objData } from '..';\n\nexport function saveToFile() {\n  const jsonString = JSON.stringify(objData, null, 2);\n\n  function downloadJSON(jsonString: string, filename: string) {\n    const blob = new Blob([jsonString], { type: 'application/json' });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  downloadJSON(jsonString, 'myObject.json');\n}\n","import '../public/styles.css';\n\nimport createTitleApp from './builders/app';\nimport { container, containerForOptions, create } from './builders/mainBlock';\nimport { createInput } from './builders/inputFields';\n\nexport function getFromLocalStorage(key: string) {\n  const jsonString = localStorage.getItem(key);\n  // Convert JSON string back to object\n  return jsonString ? JSON.parse(jsonString) : null;\n}\n\n// Call the function to retrieve the object\nconst retrievedObject = getFromLocalStorage('dataFromInputs');\nconst countElem = getFromLocalStorage('count');\n\nexport const objData: {\n  [key: string]: string | number | RegExpExecArray | null | string[] | undefined;\n} = retrievedObject || {};\n\nwindow.addEventListener('load', event => {\n  if (!localStorage.page) {\n    localStorage.page = '0';\n    location.hash = 'main';\n  }\n\n  if (localStorage.page === '0') {\n    location.hash = 'main';\n  }\n\n  if (localStorage.page === '1') {\n    location.hash = 'decision-maker';\n  }\n\n  // if (localStorage.count !== '0') {\n  const count = countElem || [1];\n  let valOpt: string | undefined;\n  let valW: number | undefined;\n  for (let i = 0; i <= count.length - 1; i += 1) {\n    valOpt = '';\n    valW = 0;\n    for (let key of Object.keys(objData)) {\n      if (count[i] === +key.replace(/\\D/g, '') && key[0] === 'o') {\n        valOpt = String(objData[key]);\n        console.log('this' + key);\n      } else if (count[i] === +key.replace(/\\D/g, '') && key[0] === '#' && objData[key]) {\n        valW = +objData[key];\n        console.log('there' + key[key.length - 1]);\n      } else {\n        continue;\n      }\n    }\n\n    // if (valOpt !== undefined && valW !== undefined) {\n    createInput(containerForOptions, count[i], valOpt, valW);\n    // }\n  }\n\n  // }\n});\n\nconst title = createTitleApp();\n\ndocument.body.append(title);\n\ncreate(title);\n\n// export const containerForOptions = document.createElement('div');\ncontainerForOptions.classList.add('containerForOptions');\ntitle.append(containerForOptions);\n","__webpack_require__.h = () => (\"fdf7e5f9822b5c49a332\")"],"names":[],"sourceRoot":""}