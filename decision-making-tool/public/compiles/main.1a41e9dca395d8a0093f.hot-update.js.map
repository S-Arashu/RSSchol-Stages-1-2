{"version":3,"file":"main.1a41e9dca395d8a0093f.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;ACvGA","sources":["webpack://decision-making-tool/./src/builders/wheel.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import { getFromLocalStorage } from '..';\nimport { container, containerForOptions } from './mainBlock';\n\nexport function createChoosePage() {\n  containerForOptions.textContent = '';\n  container.textContent = '';\n\n  const pointer = document.createElement('div');\n  pointer.setAttribute('id', 'pointer');\n  containerForOptions.append(pointer);\n\n  const canvas = document.createElement('canvas');\n  canvas.setAttribute('id', 'wheel');\n  canvas.setAttribute('width', '400');\n  canvas.setAttribute('height', '400');\n\n  containerForOptions.append(canvas);\n\n  const startButton = document.createElement('button');\n  startButton.setAttribute('id', 'start');\n  startButton.textContent = 'Start';\n  containerForOptions.append(startButton);\n\n  const output = document.createElement('div');\n  output.setAttribute('id', 'output');\n  containerForOptions.append(output);\n\n  let top = String(canvas.offsetTop + pointer.offsetHeight / 2);\n  let left = String(canvas.offsetLeft + canvas.offsetWidth / 2);\n  pointer.style.top = top + 'px';\n  pointer.style.left = left + 'px';\n\n  window.addEventListener('resize', () => {\n    top = String(canvas.offsetTop + pointer.offsetHeight / 2);\n    left = String(canvas.offsetLeft + canvas.offsetWidth / 2);\n    pointer.style.top = top + 'px';\n    pointer.style.left = left + 'px';\n  });\n\n  let options = getFromLocalStorage('dataFromInputs');\n\n  const sectionCount = Object.keys(options).filter(key => key.startsWith('option-')).length;\n  const ctx = canvas.getContext('2d');\n\n  const drawWheel = () => {\n    const angle = (2 * Math.PI) / sectionCount;\n    let startAngle = 0;\n\n    if (ctx) {\n      for (let i = 0; i < sectionCount; i++) {\n        ctx.beginPath();\n        ctx.moveTo(200, 200); // Center\n        ctx.arc(200, 200, 150, startAngle, startAngle + angle);\n        ctx.fillStyle = 'lightblue'; // Same color\n        ctx.fill();\n        ctx.stroke();\n        ctx.save();\n        ctx.translate(\n          200 + Math.cos(startAngle + angle / 2) * 100,\n          200 + Math.sin(startAngle + angle / 2) * 100,\n        );\n        ctx.rotate(startAngle + angle / 2);\n        ctx.fillStyle = 'black';\n        ctx.fillText(options[`option-#${i + 1}`] || `Section ${i + 1}`, -25, 0);\n        ctx.restore();\n        startAngle += angle;\n      }\n    }\n  };\n\n  drawWheel();\n\n  startButton.addEventListener('click', () => {\n    const totalDuration = 3000; // Duration of spin in milliseconds\n    const spinCount = 5; // Spins\n    let start: number | null = null;\n    let degrees = 0;\n\n    function spinWheel(timestamp: number | null) {\n      if (!start) start = timestamp;\n      if (timestamp && start && ctx) {\n        const elapsed = timestamp - start;\n        if (elapsed < totalDuration) {\n          // Simple easing effect\n          degrees += spinCount * 360 + (elapsed / totalDuration) * 360;\n          ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas\n          ctx.save(); // Save the current context\n          ctx.translate(200, 200); // Move to center\n          ctx.rotate((degrees * Math.PI) / 180); // Rotate\n          ctx.translate(-200, -200); // Move back\n          drawWheel(); // Draw the wheel\n          ctx.restore(); // Restore the context\n          requestAnimationFrame(spinWheel);\n        } else {\n          // Calculate the selected section\n          const selectedIndex = Math.floor(((degrees % 360) / 360) * sectionCount);\n          output.innerText = `Selected: ${options[`option-#${selectedIndex + 1}`]}`;\n        }\n      }\n    }\n\n    requestAnimationFrame(spinWheel);\n  });\n}\n","__webpack_require__.h = () => (\"cff47043641a72fd8f86\")"],"names":[],"sourceRoot":""}