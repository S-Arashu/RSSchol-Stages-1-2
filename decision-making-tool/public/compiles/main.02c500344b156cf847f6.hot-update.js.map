{"version":3,"file":"main.02c500344b156cf847f6.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpJA","sources":["webpack://decision-making-tool/./src/builders/mainBlock.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import { getFromLocalStorage } from '..';\nimport '../../public/styles.css';\nimport { Buttons } from './buttons';\nimport { clearList } from './clearList';\nimport { dialogWrongValue } from './dialog';\nimport { createInput } from './inputFields';\n\nconst NAMES_OF_BUTTONS = [\n  'Add Option',\n  'Paste list',\n  'Clear list',\n  'Save list to file',\n  'Load list from file',\n  'Start',\n];\n\nconst NUM_OF_BUTTONS = 6;\n\nexport const container = document.createElement('div');\nexport const containerForOptions = document.createElement('div');\n\nexport function create(parentTag: { after: (arg0: HTMLDivElement) => void }) {\n  if (!localStorage.count) {\n    localStorage.setItem('count', JSON.stringify([1]));\n  }\n\n  // const container = document.createElement('div');\n  containerForOptions.classList.add('container');\n  container.classList.add('container');\n  parentTag.after(containerForOptions);\n  parentTag.after(container);\n\n  const dialog = document.createElement('dialog');\n  dialog.setAttribute('aria-label', 'Paste list');\n  dialog.classList.add('popup');\n  container.append(dialog);\n  const form = document.createElement('form');\n  form.setAttribute('method', 'dialog');\n  form.classList.add('formForDialog');\n  dialog.append(form);\n  const textarea = document.createElement('textarea');\n  textarea.classList.add('textarea');\n  textarea.setAttribute('rows', '12');\n  textarea.setAttribute('cols', '64');\n  textarea.setAttribute(\n    'placeholder',\n    `\n    Paste a list of new options in a CSV-like format:\n\ntitle,1                 -> | title                 | 1 |\ntitle with whitespace,2 -> | title with whitespace | 2 |\ntitle , with , commas,3 -> | title , with , commas | 3 |\ntitle with \"quotes\",4   -> | title with \"quotes\"   | 4 |`,\n  );\n  textarea.setAttribute('name', 'table');\n  form.append(textarea);\n  const containerForButtons = document.createElement('div');\n  containerForButtons.classList.add('containerForButtons');\n  form.append(containerForButtons);\n  const cancel: Buttons = new Buttons('button', 'Cancel', 'cancelButton');\n  const confirm: Buttons = new Buttons('button', 'Confirm', 'confirmButton');\n  const cancelBut = cancel.createButton();\n  const confirmBut = confirm.createButton();\n  containerForButtons.append(cancelBut);\n  containerForButtons.append(confirmBut);\n  form.addEventListener('keypress', function (event) {\n    let key = event.key;\n    if (key === 'Enter') {\n      const lastSymbol = +textarea.value[textarea.value.length - 1];\n      // const firstNum =\n      if (isNaN(lastSymbol)) {\n        dialogWrongValue(container);\n      }\n    }\n    console.log(key);\n  });\n  confirmBut.addEventListener('click', event => {\n    const lastSymbol = +textarea.value[textarea.value.length - 1];\n\n    const dataFromTextarea = textarea.value.split('\\n');\n    dataFromTextarea.forEach(arrayElem => {\n      let data = arrayElem.split(/,[1-9]/);\n      let dataNum = /,[1-9]/.exec(arrayElem);\n      let countElem = getFromLocalStorage('count') || [];\n      const objData = getFromLocalStorage('dataFromInputs');\n      console.log(dataNum);\n      if (dataNum) {\n        objData[`#${countElem[countElem.length - 1] + 1}`] = dataNum[0]?.replace(',', '');\n        objData[`option-#${countElem[countElem.length - 1] + 1}`] = data[0];\n        // let numOfElem = getFromLocalStorage('count') || [];\n        if (countElem.length === 0) {\n          countElem.push(1);\n        } else {\n          countElem.push(countElem[countElem.length - 1] + 1);\n        }\n        localStorage.setItem('count', JSON.stringify(countElem));\n        const jsonString = JSON.stringify(objData);\n        localStorage.setItem('dataFromInputs', jsonString);\n        createInput(\n          containerForOptions,\n          countElem[countElem.length - 1],\n          data[0],\n          +dataNum[0]?.replace(',', ''),\n        );\n        textarea.value = '';\n      } else if (dataNum == null) {\n        dialogWrongValue(containerForOptions);\n        event.preventDefault();\n      }\n    });\n\n    if (isNaN(lastSymbol)) {\n      dialogWrongValue(containerForOptions);\n      event.preventDefault();\n    }\n  });\n\n  for (let i = 0; i < NUM_OF_BUTTONS; i += 1) {\n    const button = new Buttons('button', NAMES_OF_BUTTONS[i], 'buttonList');\n    const elementOfContainer = button.createButton();\n    container.append(elementOfContainer);\n\n    if (i === 0) {\n      elementOfContainer.addEventListener('click', () => {\n        let numOfElem = getFromLocalStorage('count') || [];\n        console.log(numOfElem);\n        if (numOfElem.length === 0) {\n          numOfElem.push(1);\n        } else {\n          numOfElem.push(numOfElem[numOfElem.length - 1] + 1);\n        }\n\n        createInput(containerForOptions, numOfElem[numOfElem.length - 1]);\n\n        localStorage.setItem('count', JSON.stringify(numOfElem));\n      });\n    }\n    if (i === 1) {\n      elementOfContainer.addEventListener('click', () => {\n        dialog.showModal();\n      });\n    }\n    if (i === 2) {\n      elementOfContainer.addEventListener('click', () => {\n        clearList(containerForOptions);\n      });\n    }\n  }\n}\n","__webpack_require__.h = () => (\"f8c4d5e0c707f4c6d18b\")"],"names":[],"sourceRoot":""}