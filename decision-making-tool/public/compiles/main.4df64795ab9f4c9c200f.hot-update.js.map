{"version":3,"file":"main.4df64795ab9f4c9c200f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;AC5IA","sources":["webpack://decision-making-tool/./src/builders/pasteList.ts","webpack://decision-making-tool/webpack/runtime/getFullHash"],"sourcesContent":["import { getFromLocalStorage, objData } from '..';\nimport { Buttons } from './buttons';\nimport { dialogWrongValue } from './dialog';\nimport { createInput } from './inputFields';\nimport { container, containerForOptions } from './mainBlock';\n\nexport let dialogElem: HTMLElement;\n\nexport function createPasteList() {\n  const dialog = document.createElement('dialog');\n  dialog.setAttribute('aria-label', 'Paste list');\n  dialog.classList.add('popup');\n  container.append(dialog);\n  const dialogWrapper = document.createElement('div');\n  dialogWrapper.classList.add('dialog-wrapper');\n  dialog.append(dialogWrapper);\n  const form = document.createElement('form');\n  form.setAttribute('method', 'dialog');\n  form.classList.add('formForDialog');\n  dialogWrapper.append(form);\n  const textarea = document.createElement('textarea');\n  textarea.classList.add('textarea');\n  textarea.setAttribute('rows', '12');\n  textarea.setAttribute('cols', '64');\n  textarea.setAttribute(\n    'placeholder',\n    `\n    Paste a list of new options in a CSV-like format:\n\ntitle,1                 -> | title                 | 1 |\ntitle with whitespace,2 -> | title with whitespace | 2 |\ntitle , with , commas,3 -> | title , with , commas | 3 |\ntitle with \"quotes\",4   -> | title with \"quotes\"   | 4 |`,\n  );\n  textarea.setAttribute('name', 'table');\n  form.append(textarea);\n  const containerForButtons = document.createElement('div');\n  containerForButtons.classList.add('containerForButtons');\n  form.append(containerForButtons);\n  const cancel: Buttons = new Buttons('button', 'Cancel', 'cancelButton');\n  const confirm: Buttons = new Buttons('button', 'Confirm', 'confirmButton');\n  const cancelBut = cancel.createButton();\n  const confirmBut = confirm.createButton();\n  containerForButtons.append(cancelBut);\n  containerForButtons.append(confirmBut);\n\n  dialogElem = dialog;\n\n  cancelBut.addEventListener('click', () => {\n    dialog.remove();\n    location.hash = 'main';\n  });\n\n  form.addEventListener('keypress', function (event) {\n    let key = event.key;\n    if (key === 'Enter') {\n      const lastSymbol = +textarea.value[textarea.value.length - 1];\n      if (isNaN(lastSymbol)) {\n        dialogWrongValue(container);\n      }\n    }\n  });\n\n  dialog.addEventListener('keypress', function (event) {\n    let key = event.key;\n\n    if (key === 'Escape') {\n      dialog.remove();\n    }\n    console.log(key);\n    location.hash = 'main';\n  });\n\n  dialog.addEventListener('click', closeOnBackDropClick);\n\n  function closeOnBackDropClick({ currentTarget, target }: MouseEvent): void {\n    const dialogElement = currentTarget;\n\n    if (dialogElement instanceof HTMLDialogElement) {\n      const isClickedOnBackDrop = target === dialogElement;\n      if (isClickedOnBackDrop && dialogElement) {\n        dialogElement.close();\n        dialog.remove();\n        location.hash = 'main';\n      }\n    }\n  }\n\n  confirmBut.addEventListener('click', event => {\n    const lastSymbol = +textarea.value[textarea.value.length - 1];\n    // let objData = getFromLocalStorage('dataFromInputs');\n    const dataFromTextarea = textarea.value.split('\\n');\n    dataFromTextarea.forEach(arrayElem => {\n      let data = arrayElem.split(/,[1-9]/);\n      let dataNum = /,[1-9]/.exec(arrayElem);\n      let countElem = getFromLocalStorage('count') || [];\n      console.log(dataNum);\n      if (dataNum) {\n        if (countElem.length === 0) {\n          countElem.push(1);\n        } else {\n          countElem.push(countElem[countElem.length - 1] + 1);\n        }\n        objData[`#${countElem[countElem.length - 1]}`] = dataNum[0]?.replace(',', '');\n        objData[`option-#${countElem[countElem.length - 1]}`] = data[0];\n        // let numOfElem = getFromLocalStorage('count') || [];\n\n        createInput(\n          containerForOptions,\n          countElem[countElem.length - 1],\n          data[0],\n          +dataNum[0]?.replace(',', ''),\n        );\n        localStorage.setItem('count', JSON.stringify(countElem));\n        const jsonString = JSON.stringify(objData);\n        localStorage.setItem('dataFromInputs', jsonString);\n        textarea.value = '';\n      } else if (dataNum == null) {\n        dialogWrongValue(containerForOptions);\n        event.preventDefault();\n      }\n    });\n\n    if (isNaN(lastSymbol)) {\n      dialogWrongValue(containerForOptions);\n      event.preventDefault();\n    } else {\n      dialog.remove();\n      location.hash = 'main';\n    }\n  });\n\n  dialog.addEventListener('cancel', event => {\n    // if (event.key === 'Escape') {\n    dialog.remove();\n    location.hash = 'main';\n    console.log('Remove dialog');\n    // }\n  });\n  dialog.showModal();\n}\n","__webpack_require__.h = () => (\"29b79b50a988710a5b6b\")"],"names":[],"sourceRoot":""}